name: "Terraform"
# push is running the action.
on: [push, pull_request]

jobs:
  terraform:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Terraform Init
        id: Init
        run: terraform init
        working-directory: ./ec2_instance
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        working-directory: ./ec2_instance

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./ec2_instance

      - name: Terraform Plan
        continue-on-error: true
        run: terraform plan -no-color
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          working-directory: ./ec2_instance

        # explain in english.
      - name: add-plan-comment
        uses: actions/github-script@v6
        # It is a pull request because at the top besides on I have pull_request mentioned.
        if: github.event_name == 'pull_request'
        # In order to give git permission to run the aws configuration. The AWS KEY and AWS secrete keys are
        # required. The way to define these are through the environment variables.
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        # explain the with directive.
        with:
          # github token gives github actions permission to submit data to a pull request.

          # which values are static and which are variables.
          # The vertical line means to run multiple lines in one.
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\ ${process.env.ec2_instance}\`\`\`

            </details>


            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

          # TF_cloud_organization: "ec2_instance"
          # working-directory: ./ec2_instance
          # github-token: ${{ secrets.GITHUB_TOKEN }}
          # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # - name: Terraform Apply
      #   id: apply
      #   env:
      #     TF_VAR_ec2_name: "$"
      #   run: |
      #     cd tf-example/
      #     terraform init
      #     terraform validate
      #     terraform plan
      #     terraform apply -auto-approve

# Plan should show up in github on the pull request page
